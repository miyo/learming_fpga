<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>高位合成編 on Learning FPGA</title>
    <link>https://miyo.github.io/learning_fpga/docs/book02/</link>
    <description>Recent content in 高位合成編 on Learning FPGA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Oct 2019 19:15:46 +0900</lastBuildDate>
    
	<atom:link href="https://miyo.github.io/learning_fpga/docs/book02/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>高位合成とは？</title>
      <link>https://miyo.github.io/learning_fpga/docs/book02/about_hls/</link>
      <pubDate>Wed, 30 Oct 2019 19:15:46 +0900</pubDate>
      
      <guid>https://miyo.github.io/learning_fpga/docs/book02/about_hls/</guid>
      <description>FPGAを使うためには，長い間，VHDLあるいはVerilog HDLによるRTL設計が主流でした．しかし，HDLによるRTL設計は煩雑であり時間のかかる作業で簡単ではありません．そこで，最近では，高位合成という，HDLよりも高い水準での開発を可能する技術に注目が集まっています．特に，C/C++を利用したFPGA開発手法は，FPGAメーカーであるXilinxとIntelの両方から無償でツールが提供され，簡単にはじめられるようになりました．
この章では，実際に高位合成を使ってみる前に，高位合成とは何か，ということについて学んでおきましょう．
FPGAとは - おさらい Field Programmable Gate Array(FPGA)は，プログラム可能なハードウェアデバイスであり，ユーザが自由にハードウェアロジックをその上に構築できます．そのため，ASIC開発のプロトタイプ環境としての利用に加え，アプリケーションに応じたユーザ独自の専用ハードウェア開発の環境としても利用されます．
FPGAを用いたアプリケーション開発では，プロセッサ上でソフトウェアとして実装する場合に比べ，並列性の活用による低消費電力で高い処理能力の実現が期待される．アーキテクチャを工夫し，データ並列性とパイプライン並列性を活用することで，プロセッサと比較して数十倍から数百倍以上の性能向上が得られます．
また，単に高速に演算処理を実現できるというだけではなく，FPGAはアプリケーションを構成する処理回路が入出力信号を直接操作することができるため，低レイテンシ，高スループットで物理デバイスにアクセスできる点に強みを持ちます．加えて，クロックレベルで決定的な処理を実装できることも，アプリケーションを専用ハードウェアとして実装するときの強みです． 現代的なプロセッサで動作するソフトウェアでは，キャッシュなどの実行支援ユニットの動作や，複数のプログラムのコンテクスト切り替えなどによって，実行タイミングや処理にかかる時間を正確に管理することが難しくなっています． 一方で，専用ハードウェアとしてアプリケーションを実装する場合には，クロック単位での信号の変化を自分で制御することができます．
FPGAを使う&amp;hellip;のは辛い?? FPGAの性能を効率良く活用するためには，一般に，VHDLやVerilogを用いたRTL設計が必要で，プロセッサ上で動作するソフトウェア開発に比べて，人的，時間的な開発コストが大きいのが問題でした．特に，アルゴリズムとして複雑な処理のRTL記述は繁雑で手間がかかり，時にはバグの温床となっています． また，アプリケーションに合ったアーキテクチャで処理を実装することができれば高い演算性能を達成することができる一方で，そうでない場合には処理性能でプロセッサやASICを凌駕することは困難です． そのため，FPGAで高性能処理を実現するためにアーキテクチャ上の試行錯誤をする必要があり，このこともまた，開発コストを大きくする要因です．
高位合成の登場 ソフトウェア開発のように，手軽にFPGA開発を行えるようにする取り組みとして，プログラムをハードウェアロジックに変換する技術が高位合成です．特に，C/C++で記述されたプログラムをハードウェアロジックに変換する高位合成処理系は，多数開発，販売されています．従来，実用に足るツールは高価だったのですが，2018年現在では，FPGAメーカーであるXilinxとIntelの両方からVivado HLSおよびIntel HLSコンパイラというツールが，無償で提供されるようになり導入のコストがぐっと小さくなりました．
自由にC/C++の記述能力を利用することはできないものの，C/C++のループや条件分岐などの制御構文や，処理を関数にまとめてそれを呼び出す処理分割といったメリットを享受することができます．信号処理をソフトウェアで実装した場合にありがちな多重のループ文に対してもパイプライン化やアンロールでハードウェアの特徴を活用できるようになったこと，ターゲット周波数によって実装方式の探索をさせられることなどから，場合によっては手でがんばってハードウェアを設計するよりも，よい回路を生成できることもあるようです．
C/C++ベースのFPGA開発のながれ C/C++ベースのFPGAの開発，特にXilinxのVivado HLSを利用する流れを下の図に示します．要は，C/C++で記述したソースコードをVivado HLSによってVHDLまたはVerilog HDLに変換し，その変換後のコードをVivadoでFPGA用のビットストリームにする，というのが開発のおおまかな流れです．
 Vivado HLSを使った開発フロー
  C/C++ベースで作ったモジュールを設計に組み込むためには，ツールへの慣れは必要になりますが，特段難しいものではありません．次章以降，簡単なサンプルでステップを踏んでみていきましょう．</description>
    </item>
    
    <item>
      <title>VivadoHLSを使ったCベース設計に挑戦</title>
      <link>https://miyo.github.io/learning_fpga/docs/book02/hls_quick_guide/</link>
      <pubDate>Wed, 30 Oct 2019 19:15:46 +0900</pubDate>
      
      <guid>https://miyo.github.io/learning_fpga/docs/book02/hls_quick_guide/</guid>
      <description>C/C++ベースのFPGA開発をはじめるにあたって，まずはVivado HLSの使い方をFPGAで動作するビットストリームの作り方まで一通り学んでしまいましょう．この章では，とりあえずVivado HLSを使った開発ができるようになるために，ツールを一通り使ってC/C++で書いたコードからFPGAで動作するビットストリームを生成する作業までを一通り体験してみることにします．習うより慣れろ，ですね．
例題 VivaoHLSでは，基本的な制御構文のC/C++コードをHDLモジュールにすることができます．ここでは，簡単なプログラムをハードウェア化してみましょう．
1 2 3 4 5 6 7 8 9 10 11 12 13  int bitcount(int a) { int i; int s = 0; int tmp = a; for(i = 0; i &amp;lt; 32; i++){ if((tmp &amp;amp; 0x01) == 0x01){ s++; } tmp = tmp &amp;gt;&amp;gt; 1; } return s; }   Vivado HLSプロジェクトの作成  Vivado HLSを起動したところ．Vivado HLSはデスクトップのショートカットアイコンやスタートメニューから起動する．
   プロジェクト名と格納フォルダを指定．ここでは．ホームの下のVivadoの下に格納することとし，名前をhls_test_1とした
   既存の設計ソースコードがあれば，ここで追加．ないのでNextで次へ．</description>
    </item>
    
    <item>
      <title>Vivado HLS基本実験</title>
      <link>https://miyo.github.io/learning_fpga/docs/book02/hls_basic/</link>
      <pubDate>Wed, 30 Oct 2019 19:15:46 +0900</pubDate>
      
      <guid>https://miyo.github.io/learning_fpga/docs/book02/hls_basic/</guid>
      <description>VivadoHLSでは，C/C++からよりよいハードウェアを作成するために，いくつかのpragmaで指示をあたえることができるようになっています．どんなpragmaがあり，どのような効果があるのか，試してみましょう．
データに関するpragmaの調査と実験 Vivado HLSではトップモジュールに選択した関数の引数が，RTLモジュールとの入出力になります．RTLモジュールとのインターフェースをどのようにしたいかは，引数に対するpragmaで指定することができます．
pragmaによって，
 std_logic_vector のような単純な信号 ブロックメモリ相当のインターフェース FIFO相当のインターフェース AXI4-Stream相当のインターフェース  を選択できます．ユーザガイドを参考にpragmaを指定し，合成されるHDLモジュールを調査してみましょう． C/RTLシミュレーションでインターフェースの振る舞いを観察してみるとよいでしょう．
回路生成方式に関するpragmraの調査と実験 高速あるいは効率良く動作するハードウェアの設計では，データ並列性やパイプライン並列性の活用が必要不可欠です．Vivado HLSではデータ並列性やパイプライン並列性の抽出は，ほぼ人手によるpragmaに委ねられています．言いかえれば，正しくpragamを指定できなければ，Vivado HLSをうまく使いこなすことはできません．
次のキーワードを参考にpragmaを調べて，合成されるHDLモジュールを調査してみましょう．
 DATAFLOW UNROLL PIPELINE  C/RTLシミュレーションで，pragmaの指定の有無による実行サイクル数の変化を観察してみるとよいでしょう．</description>
    </item>
    
    <item>
      <title>Vivado HLS応用実験</title>
      <link>https://miyo.github.io/learning_fpga/docs/book02/hls_challenge/</link>
      <pubDate>Wed, 30 Oct 2019 19:15:46 +0900</pubDate>
      
      <guid>https://miyo.github.io/learning_fpga/docs/book02/hls_challenge/</guid>
      <description>C/C++ベースの音声信号処理に挑戦 ZYBO Z7-20には音声入出力用のジャックが備わっています．これを利用すると外部からの音声信号を取り込みFPGAで処理することができます．信号は，SSM2603というICでA/D変換されます．SSM2603とFPGAはI2Sで音声データをやりとりすることができます． 音声信号の送受信はHDLモジュールで記述したものを利用することとして，ここでは，音声信号処理のカーネルをC/C++で実装してみましょう．
たとえば，
 規定値より大きな値がきたときだけ音声を出力する， 平滑化フィルタで音を滑らかにする， 他の音源とまぜあわせる 圧縮・伸長する  などが考えられます． pragmaをうまく活用してパイプライン化することで，音声信号をリアルタイムに処理することができます．
発展: C/C++ベースの画像処理に挑戦 準備 ZYBO Z7-20にはHDMIの入力と出力があります．この入出力を利用するアプリケーションを開発してみましょう．
画像処理の課題例 Xilinxからは，OpenCV関数相当の画像処理ルーチンxfOpenCVが提供されています．それらを使用することで比較的容易に複雑な画像処理をFPGA上に実装できます．それらを使用するか，あるいは，自分でC/C++で画像処理ルーチンを書いてFPGAでの画像処理に挑戦してみましょう．
たとえば，
 左右の反転． アップコンバージョン/ダウンコンバージョン 平滑化フィルタで画像を滑らかにする， 圧縮・伸長する  などが考えられます．
音声信号処理同様，あるいは，音声信号処理以上に，pragmaをうまく活用してパイプライン化することでリアルタイムに処理できるハードウェアの設計がもとめられます．</description>
    </item>
    
  </channel>
</rss>